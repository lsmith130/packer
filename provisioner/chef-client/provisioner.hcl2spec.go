// Code generated by "mapstructure-to-hcl2 -type Config"; DO NOT EDIT.
package chefclient

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName            string                 `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name,optional"`
	PackerBuilderType          string                 `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type,optional"`
	PackerDebug                bool                   `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug,optional"`
	PackerForce                bool                   `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force,optional"`
	PackerOnError              string                 `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error,optional"`
	PackerUserVars             map[string]string      `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables,optional"`
	PackerSensitiveVars        []string               `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables,optional"`
	Json                       map[string]interface{} `cty:"json" hcl:"json,optional"`
	ChefEnvironment            string                 `mapstructure:"chef_environment" cty:"chef_environment" hcl:"chef_environment,optional"`
	ChefLicense                string                 `mapstructure:"chef_license" cty:"chef_license" hcl:"chef_license,optional"`
	ClientKey                  string                 `mapstructure:"client_key" cty:"client_key" hcl:"client_key,optional"`
	ConfigTemplate             string                 `mapstructure:"config_template" cty:"config_template" hcl:"config_template,optional"`
	ElevatedUser               string                 `mapstructure:"elevated_user" cty:"elevated_user" hcl:"elevated_user,optional"`
	ElevatedPassword           string                 `mapstructure:"elevated_password" cty:"elevated_password" hcl:"elevated_password,optional"`
	EncryptedDataBagSecretPath string                 `mapstructure:"encrypted_data_bag_secret_path" cty:"encrypted_data_bag_secret_path" hcl:"encrypted_data_bag_secret_path,optional"`
	ExecuteCommand             string                 `mapstructure:"execute_command" cty:"execute_command" hcl:"execute_command,optional"`
	GuestOSType                string                 `mapstructure:"guest_os_type" cty:"guest_os_type" hcl:"guest_os_type,optional"`
	InstallCommand             string                 `mapstructure:"install_command" cty:"install_command" hcl:"install_command,optional"`
	KnifeCommand               string                 `mapstructure:"knife_command" cty:"knife_command" hcl:"knife_command,optional"`
	NodeName                   string                 `mapstructure:"node_name" cty:"node_name" hcl:"node_name,optional"`
	PolicyGroup                string                 `mapstructure:"policy_group" cty:"policy_group" hcl:"policy_group,optional"`
	PolicyName                 string                 `mapstructure:"policy_name" cty:"policy_name" hcl:"policy_name,optional"`
	PreventSudo                bool                   `mapstructure:"prevent_sudo" cty:"prevent_sudo" hcl:"prevent_sudo,optional"`
	RunList                    []string               `mapstructure:"run_list" cty:"run_list" hcl:"run_list,optional"`
	ServerUrl                  string                 `mapstructure:"server_url" cty:"server_url" hcl:"server_url,optional"`
	SkipCleanClient            bool                   `mapstructure:"skip_clean_client" cty:"skip_clean_client" hcl:"skip_clean_client,optional"`
	SkipCleanNode              bool                   `mapstructure:"skip_clean_node" cty:"skip_clean_node" hcl:"skip_clean_node,optional"`
	SkipCleanStagingDirectory  bool                   `mapstructure:"skip_clean_staging_directory" cty:"skip_clean_staging_directory" hcl:"skip_clean_staging_directory,optional"`
	SkipInstall                bool                   `mapstructure:"skip_install" cty:"skip_install" hcl:"skip_install,optional"`
	SslVerifyMode              string                 `mapstructure:"ssl_verify_mode" cty:"ssl_verify_mode" hcl:"ssl_verify_mode,optional"`
	TrustedCertsDir            string                 `mapstructure:"trusted_certs_dir" cty:"trusted_certs_dir" hcl:"trusted_certs_dir,optional"`
	StagingDir                 string                 `mapstructure:"staging_directory" cty:"staging_directory" hcl:"staging_directory,optional"`
	ValidationClientName       string                 `mapstructure:"validation_client_name" cty:"validation_client_name" hcl:"validation_client_name,optional"`
	ValidationKeyPath          string                 `mapstructure:"validation_key_path" cty:"validation_key_path" hcl:"validation_key_path,optional"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{} { return new(FlatConfig) }

// HCL2Spec returns the hcldec.Spec of a Config.
// This spec is used by HCL to read the fields of Config.
func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"PackerBuildName":            &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"PackerBuilderType":          &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"PackerDebug":                &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"PackerForce":                &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"PackerOnError":              &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"PackerUserVars":             &hcldec.BlockAttrsSpec{TypeName: "packer_user_variables", ElementType: cty.String, Required: false},
		"PackerSensitiveVars":        &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"Json":                       &hcldec.BlockAttrsSpec{TypeName: "json", ElementType: cty.String, Required: false},
		"ChefEnvironment":            &hcldec.AttrSpec{Name: "chef_environment", Type: cty.String, Required: false},
		"ChefLicense":                &hcldec.AttrSpec{Name: "chef_license", Type: cty.String, Required: false},
		"ClientKey":                  &hcldec.AttrSpec{Name: "client_key", Type: cty.String, Required: false},
		"ConfigTemplate":             &hcldec.AttrSpec{Name: "config_template", Type: cty.String, Required: false},
		"ElevatedUser":               &hcldec.AttrSpec{Name: "elevated_user", Type: cty.String, Required: false},
		"ElevatedPassword":           &hcldec.AttrSpec{Name: "elevated_password", Type: cty.String, Required: false},
		"EncryptedDataBagSecretPath": &hcldec.AttrSpec{Name: "encrypted_data_bag_secret_path", Type: cty.String, Required: false},
		"ExecuteCommand":             &hcldec.AttrSpec{Name: "execute_command", Type: cty.String, Required: false},
		"GuestOSType":                &hcldec.AttrSpec{Name: "guest_os_type", Type: cty.String, Required: false},
		"InstallCommand":             &hcldec.AttrSpec{Name: "install_command", Type: cty.String, Required: false},
		"KnifeCommand":               &hcldec.AttrSpec{Name: "knife_command", Type: cty.String, Required: false},
		"NodeName":                   &hcldec.AttrSpec{Name: "node_name", Type: cty.String, Required: false},
		"PolicyGroup":                &hcldec.AttrSpec{Name: "policy_group", Type: cty.String, Required: false},
		"PolicyName":                 &hcldec.AttrSpec{Name: "policy_name", Type: cty.String, Required: false},
		"PreventSudo":                &hcldec.AttrSpec{Name: "prevent_sudo", Type: cty.Bool, Required: false},
		"RunList":                    &hcldec.AttrSpec{Name: "run_list", Type: cty.List(cty.String), Required: false},
		"ServerUrl":                  &hcldec.AttrSpec{Name: "server_url", Type: cty.String, Required: false},
		"SkipCleanClient":            &hcldec.AttrSpec{Name: "skip_clean_client", Type: cty.Bool, Required: false},
		"SkipCleanNode":              &hcldec.AttrSpec{Name: "skip_clean_node", Type: cty.Bool, Required: false},
		"SkipCleanStagingDirectory":  &hcldec.AttrSpec{Name: "skip_clean_staging_directory", Type: cty.Bool, Required: false},
		"SkipInstall":                &hcldec.AttrSpec{Name: "skip_install", Type: cty.Bool, Required: false},
		"SslVerifyMode":              &hcldec.AttrSpec{Name: "ssl_verify_mode", Type: cty.String, Required: false},
		"TrustedCertsDir":            &hcldec.AttrSpec{Name: "trusted_certs_dir", Type: cty.String, Required: false},
		"StagingDir":                 &hcldec.AttrSpec{Name: "staging_directory", Type: cty.String, Required: false},
		"ValidationClientName":       &hcldec.AttrSpec{Name: "validation_client_name", Type: cty.String, Required: false},
		"ValidationKeyPath":          &hcldec.AttrSpec{Name: "validation_key_path", Type: cty.String, Required: false},
	}
	return s
}
