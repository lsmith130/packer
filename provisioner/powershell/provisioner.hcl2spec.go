// Code generated by "mapstructure-to-hcl2 -type Config"; DO NOT EDIT.
package powershell

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
	"time"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName        string            `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name,optional"`
	PackerBuilderType      string            `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type,optional"`
	PackerDebug            bool              `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug,optional"`
	PackerForce            bool              `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force,optional"`
	PackerOnError          string            `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error,optional"`
	PackerUserVars         map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables,optional"`
	PackerSensitiveVars    []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables,optional"`
	Binary                 bool              `cty:"binary" hcl:"binary,optional"`
	ExecuteCommand         string            `mapstructure:"execute_command" cty:"execute_command" hcl:"execute_command,optional"`
	Inline                 []string          `cty:"inline" hcl:"inline,optional"`
	RemotePath             string            `mapstructure:"remote_path" cty:"remote_path" hcl:"remote_path,optional"`
	Script                 string            `cty:"script" hcl:"script,optional"`
	Scripts                []string          `cty:"scripts" hcl:"scripts,optional"`
	ValidExitCodes         []int             `mapstructure:"valid_exit_codes" cty:"valid_exit_codes" hcl:"valid_exit_codes,optional"`
	Vars                   []string          `mapstructure:"environment_vars" cty:"environment_vars" hcl:"environment_vars,optional"`
	RemoteEnvVarPath       string            `mapstructure:"remote_env_var_path" cty:"remote_env_var_path" hcl:"remote_env_var_path,optional"`
	ElevatedExecuteCommand string            `mapstructure:"elevated_execute_command" cty:"elevated_execute_command" hcl:"elevated_execute_command,optional"`
	StartRetryTimeout      time.Duration     `mapstructure:"start_retry_timeout" cty:"start_retry_timeout" hcl:"start_retry_timeout,optional"`
	EnvVarFormat           string            `cty:"env_var_format" hcl:"env_var_format,optional"`
	ElevatedEnvVarFormat   string            `mapstructure:"elevated_env_var_format" cty:"elevated_env_var_format" hcl:"elevated_env_var_format,optional"`
	ElevatedUser           string            `mapstructure:"elevated_user" cty:"elevated_user" hcl:"elevated_user,optional"`
	ElevatedPassword       string            `mapstructure:"elevated_password" cty:"elevated_password" hcl:"elevated_password,optional"`
	ExecutionPolicy        ExecutionPolicy   `mapstructure:"execution_policy" hcl2-schema-generator:"execution_policy,direct" cty:"execution_policy" hcl:"execution_policy,optional"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{} { return new(FlatConfig) }

// HCL2Spec returns the hcldec.Spec of a Config.
// This spec is used by HCL to read the fields of Config.
func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"PackerBuildName":        &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"PackerBuilderType":      &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"PackerDebug":            &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"PackerForce":            &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"PackerOnError":          &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"PackerUserVars":         &hcldec.BlockAttrsSpec{TypeName: "packer_user_variables", ElementType: cty.String, Required: false},
		"PackerSensitiveVars":    &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"Binary":                 &hcldec.AttrSpec{Name: "binary", Type: cty.Bool, Required: false},
		"ExecuteCommand":         &hcldec.AttrSpec{Name: "execute_command", Type: cty.String, Required: false},
		"Inline":                 &hcldec.AttrSpec{Name: "inline", Type: cty.List(cty.String), Required: false},
		"RemotePath":             &hcldec.AttrSpec{Name: "remote_path", Type: cty.String, Required: false},
		"Script":                 &hcldec.AttrSpec{Name: "script", Type: cty.String, Required: false},
		"Scripts":                &hcldec.AttrSpec{Name: "scripts", Type: cty.List(cty.String), Required: false},
		"ValidExitCodes":         &hcldec.AttrSpec{Name: "valid_exit_codes", Type: cty.List(cty.Number), Required: false},
		"Vars":                   &hcldec.AttrSpec{Name: "environment_vars", Type: cty.List(cty.String), Required: false},
		"RemoteEnvVarPath":       &hcldec.AttrSpec{Name: "remote_env_var_path", Type: cty.String, Required: false},
		"ElevatedExecuteCommand": &hcldec.AttrSpec{Name: "elevated_execute_command", Type: cty.String, Required: false},
		"StartRetryTimeout":      &hcldec.AttrSpec{Name: "start_retry_timeout", Type: cty.String, Required: false},
		"EnvVarFormat":           &hcldec.AttrSpec{Name: "env_var_format", Type: cty.String, Required: false},
		"ElevatedEnvVarFormat":   &hcldec.AttrSpec{Name: "elevated_env_var_format", Type: cty.String, Required: false},
		"ElevatedUser":           &hcldec.AttrSpec{Name: "elevated_user", Type: cty.String, Required: false},
		"ElevatedPassword":       &hcldec.AttrSpec{Name: "elevated_password", Type: cty.String, Required: false},
		"ExecutionPolicy":        &hcldec.AttrSpec{Name: "ExecutionPolicy", Type: cty.Number, Required: false},
	}
	return s
}
