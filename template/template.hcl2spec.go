// Code generated by "mapstructure-to-hcl2 -type Provisioner"; DO NOT EDIT.
package template

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
	"time"
)

// FlatProvisioner is an auto-generated flat version of Provisioner.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatProvisioner struct {
	Only        []string               `json:"only,omitempty" cty:"only" hcl:"only,optional"`
	Except      []string               `json:"except,omitempty" cty:"except" hcl:"except,optional"`
	Type        string                 `json:"type" cty:"type" hcl:"type,optional"`
	Config      map[string]interface{} `json:"config,omitempty" cty:"config" hcl:"config,optional"`
	Override    map[string]interface{} `json:"override,omitempty" cty:"override" hcl:"override,optional"`
	PauseBefore time.Duration          `mapstructure:"pause_before" json:"pause_before,omitempty" cty:"pause_before" hcl:"pause_before,optional"`
	Timeout     time.Duration          `mapstructure:"timeout" json:"timeout,omitempty" cty:"timeout" hcl:"timeout,optional"`
}

// FlatMapstructure returns a new FlatProvisioner.
// FlatProvisioner is an auto-generated flat version of Provisioner.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Provisioner) FlatMapstructure() interface{} { return new(FlatProvisioner) }

// HCL2Spec returns the hcldec.Spec of a Provisioner.
// This spec is used by HCL to read the fields of Provisioner.
func (*Provisioner) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Only":        &hcldec.AttrSpec{Name: "only", Type: cty.List(cty.String), Required: false},
		"Except":      &hcldec.AttrSpec{Name: "except", Type: cty.List(cty.String), Required: false},
		"Type":        &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"Config":      &hcldec.BlockAttrsSpec{TypeName: "config", ElementType: cty.String, Required: false},
		"Override":    &hcldec.BlockAttrsSpec{TypeName: "override", ElementType: cty.String, Required: false},
		"PauseBefore": &hcldec.AttrSpec{Name: "pause_before", Type: cty.String, Required: false},
		"Timeout":     &hcldec.AttrSpec{Name: "timeout", Type: cty.String, Required: false},
	}
	return s
}
