// Code generated by "mapstructure-to-hcl2 -type Config"; DO NOT EDIT.
package vsphere

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName     string            `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name,optional"`
	PackerBuilderType   string            `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type,optional"`
	PackerDebug         bool              `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug,optional"`
	PackerForce         bool              `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force,optional"`
	PackerOnError       string            `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error,optional"`
	PackerUserVars      map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables,optional"`
	PackerSensitiveVars []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables,optional"`
	Cluster             string            `mapstructure:"cluster" cty:"cluster" hcl:"cluster,optional"`
	Datacenter          string            `mapstructure:"datacenter" cty:"datacenter" hcl:"datacenter,optional"`
	Datastore           string            `mapstructure:"datastore" cty:"datastore" hcl:"datastore,optional"`
	DiskMode            string            `mapstructure:"disk_mode" cty:"disk_mode" hcl:"disk_mode,optional"`
	Host                string            `mapstructure:"host" cty:"host" hcl:"host,optional"`
	ESXiHost            string            `mapstructure:"esxi_host" cty:"esxi_host" hcl:"esxi_host,optional"`
	Insecure            bool              `mapstructure:"insecure" cty:"insecure" hcl:"insecure,optional"`
	Options             []string          `mapstructure:"options" cty:"options" hcl:"options,optional"`
	Overwrite           bool              `mapstructure:"overwrite" cty:"overwrite" hcl:"overwrite,optional"`
	Password            string            `mapstructure:"password" cty:"password" hcl:"password,optional"`
	ResourcePool        string            `mapstructure:"resource_pool" cty:"resource_pool" hcl:"resource_pool,optional"`
	Username            string            `mapstructure:"username" cty:"username" hcl:"username,optional"`
	VMFolder            string            `mapstructure:"vm_folder" cty:"vm_folder" hcl:"vm_folder,optional"`
	VMName              string            `mapstructure:"vm_name" cty:"vm_name" hcl:"vm_name,optional"`
	VMNetwork           string            `mapstructure:"vm_network" cty:"vm_network" hcl:"vm_network,optional"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{} { return new(FlatConfig) }

// HCL2Spec returns the hcldec.Spec of a Config.
// This spec is used by HCL to read the fields of Config.
func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"PackerBuildName":     &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"PackerBuilderType":   &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"PackerDebug":         &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"PackerForce":         &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"PackerOnError":       &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"PackerUserVars":      &hcldec.BlockAttrsSpec{TypeName: "packer_user_variables", ElementType: cty.String, Required: false},
		"PackerSensitiveVars": &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"Cluster":             &hcldec.AttrSpec{Name: "cluster", Type: cty.String, Required: false},
		"Datacenter":          &hcldec.AttrSpec{Name: "datacenter", Type: cty.String, Required: false},
		"Datastore":           &hcldec.AttrSpec{Name: "datastore", Type: cty.String, Required: false},
		"DiskMode":            &hcldec.AttrSpec{Name: "disk_mode", Type: cty.String, Required: false},
		"Host":                &hcldec.AttrSpec{Name: "host", Type: cty.String, Required: false},
		"ESXiHost":            &hcldec.AttrSpec{Name: "esxi_host", Type: cty.String, Required: false},
		"Insecure":            &hcldec.AttrSpec{Name: "insecure", Type: cty.Bool, Required: false},
		"Options":             &hcldec.AttrSpec{Name: "options", Type: cty.List(cty.String), Required: false},
		"Overwrite":           &hcldec.AttrSpec{Name: "overwrite", Type: cty.Bool, Required: false},
		"Password":            &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"ResourcePool":        &hcldec.AttrSpec{Name: "resource_pool", Type: cty.String, Required: false},
		"Username":            &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"VMFolder":            &hcldec.AttrSpec{Name: "vm_folder", Type: cty.String, Required: false},
		"VMName":              &hcldec.AttrSpec{Name: "vm_name", Type: cty.String, Required: false},
		"VMNetwork":           &hcldec.AttrSpec{Name: "vm_network", Type: cty.String, Required: false},
	}
	return s
}
